# Written entirely by Daniel Foreacre
# Program to convert the data files generated by the NEURON program to a pickle that is readable by the TCN testing program.

import numpy as np
import pickle

input_file = open("nrn_inputs.dat")
output_file = open("nrn_outputs.dat")
spikes_file = open("nrn_spikes.dat")

num_synapses = 639
sim_duration_ms = 6000
num_simulations = 128

experiment_dict = {
    'Params': {
         'randomSeed': 100520, 'numSimulations': 128, 'inhibitorySynapseType': 'GABA_A', 'excitatorySynapseType': 'NMDA', 'totalSimDurationInSec': 6, 'totalNumSimulationSeconds': 768 ,
         'allSegmentsType': np.zeros(num_synapses)
    },
    'Results': {
        'listOfSingleSimulationDicts': []
    }
}

for sim_num in range(0, num_simulations - 1):
    sim_dict = {}
    line = input_file.readline()
    if line != "":
        x_excit = {}
        x_inhib = {}
        count = 0
        synapses = line.split(" | ")
        for spikes in synapses:
            spike_nums = []
            for numStr in spikes.split():
                num = int(float(numStr))
                if (num >0 and num < sim_duration_ms):
                    spike_nums.append(num)
            if (count < num_synapses):
                x_excit.update({count: spike_nums})
            elif (count < (num_synapses * 2)):
                x_inhib.update({(count - num_synapses): spike_nums})
            count += 1
        sim_dict.update({'exInputSpikeTimes': x_excit})
        sim_dict.update({'inhInputSpikeTimes': x_inhib})

    # Read in soma voltages
    line = output_file.readline()
    if line != "":
        times = line.split()
        times_nums = []
        for t in times:
            times_nums.append(float(t))
        times_nums = np.array(times_nums, dtype=np.float16)
        sim_dict.update({'somaVoltageLowRes': times_nums})

    # Read in soma spike times
    line = spikes_file.readline()
    if line != "":
        spikes = line.split()
        spike_nums = []
        for x in spikes:
            spike_nums.append(int(float(x)))
        spike_nums = np.array(spike_nums, dtype=np.float16)
        sim_dict.update({'outputSpikeTimes': spike_nums})

    # Add simulation to experiment dictionary
    experiment_dict['Results']['listOfSingleSimulationDicts'].append(sim_dict)

input_file.close()
output_file.close()
spikes_file.close()

with open('128_simulationRuns_6_secDuration_randomSeed_100520.p', 'wb') as f:
    pickle.dump(experiment_dict, f)
print("Pickle created")

with open('DF_readable_file.dat', 'w') as f:
    f.write(str(experiment_dict))
print("Readable file created")